@model  Aspose.Slides.Web.UI.Models.Interfaces.ISplitterModel

<div class="container-fluid asposetools pb5">
    <div class="container">
        <div class="row">
            <div class="col-md-12 pt-5 pb-5">
                <partial name="HeaderProduct" for="@Model" />
                <partial name="UploadFile" for="UploadFile" />
                <partial name="DownloadResult" for="@Model" />
                <partial name="Alert" for="@Model" />
                <partial name="Loader" for="@Model" />

                <div id="WorkPlaceHolder">
                    <form class="workForm" method="POST">
                        <div class="row" style="padding-bottom:50px">
                            <div class="col-md-4 col-md-offset-2 col-sm-5 col-sm-offset-1 col-xs-12" style="padding-top:10px">
                                <p>@Model.IntoMany</p>
                                <div class="form-group" style="text-align:left">
                                    <label class="radio-inline">
                                        <input type="radio" name="splitType" id="radioSlideBySlide" value="0" checked /> @Model.Every
                                    </label>
                                    <br />
                                    <label class="radio-inline" style="margin:12px 0 10px 0">
                                        <input type="radio" name="splitType" id="radioEvenOdd" value="1" /> @Model.Odd
                                    </label>
                                    <br />
                                    <label class="radio-inline">
                                        <input type="radio" name="splitType" id="radioNumber" value="2" /> @Model.ByNumber
                                    </label>
                                    <input type="text" name="splitNumber" id="splitNumber" style="width:40px" />
                                </div>
                            </div>
                            <div class="col-md-4 col-sm-5 col-xs-12" style="padding-top:10px">
                                <p>@Model.IntoSingle</p>
                                <div class="form-group" style="text-align:left">
                                    <label class="radio-inline">
                                        <input type="radio" name="splitType" id="radioRange" value="3" /> @Model.PageRange
                                    </label>
                                    <input type="text" name="splitRange" id="splitRange" placeholder="1-2,4,6-9" style="width:120px" />
                                </div>
                            </div>
                            <div class="clearfix">&nbsp;</div>
                        </div>

                        <input type="hidden" name="id" />

                        <div class="saveas">
                            <em>Save as</em>
                            <div class="btn-group saveformat">
                                <input type="hidden" name="format" id="format" value="@Model.ToFormat">
                                <button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" id="btnSaveAs" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @Model.ToFormat.ToUpper()
                                </button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                    @foreach (var format in Model.Formats)
                                    {
                                        <a onclick="AssignBtnToText(this)" class="dropdown-item">@format.ToUpper()</a>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="convertbtn">
                            <input type="submit" class="btn btn-success btn-lg" ID="workButton" value="@Model.WorkButtonText" />
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        const splitNumberInput = $("#splitNumber");
        const splitRangeInput = $("#splitRange");

        function wrongSplitNumberFormat(text) {
            const number = parseInt(splitNumberInput.val());
            return isNaN(number) || number < 1;
        }

        function wrongSplitRangeFormat(text) {
            var pars = text.replace(/\s/g, ""); // remove whitespace
            if (pars.length === 0 || pars.match(/^\s+$/) || (pars.indexOf(',') === -1 && !pars.match(/^\d+$/) && !pars.match(/^\d+\-\d+$/))) {
                return true;
            } else {
                var splitResult = pars.split(',');
                for (var i = 0; i < splitResult.length; i++) {
                    if (!splitResult[i].match(/^\d+$/) && !splitResult[i].match(/^\d+\-\d+$/)) {
                        return true;
                    } else if (splitResult[i].match(/^\d+\-\d+$/)) {
                        var dashPos = splitResult[i].indexOf('-');
                        var v1 = parseInt(splitResult[i].substring(0, dashPos));
                        var v2 = parseInt(splitResult[i].substring(dashPos + 1));
                        if (v1 >= v2) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        window.onValidateWork = function () {

            $('#workButton').addClass("hidden");
            splitNumberInput.css({ 'border': '' });
            splitRangeInput.css({ 'border': '' });

            const splitRange = $('#radioRange').is(":checked");
            if (splitRange && wrongSplitRangeFormat(splitRangeInput.val())) {
                splitRangeInput.css({ 'border': '2px solid red' });
                showAlert('@Model.RangeException');
                $('#workButton').removeClass("hidden");
                return false;
            }

            const splitNumber = $('#radioNumber').is(":checked");
            if (splitNumber && wrongSplitNumberFormat(splitNumberInput.val())) {
                splitNumberInput.css({ 'border': '2px solid red' });
                showAlert('@Model.NumberException');
                $('#workButton').removeClass("hidden");
                return false;
            }

            if ($('input[name="FileNames"]:isEmpty').length >= 0 &&
                $('input[name="FileNames"]').length == 0) {
                showAlert('@Model.FileSelectMessage');
                $('#workButton').removeClass("hidden");
                return false;
            }

            return true;
        }

        $(document).ready(function () {
            registerUploadHandlers();
            registerFormHandlers();
        });

        window.Method = "Splitter";
        window.APIMethodWorkUrl = `${APIBasePath}api/Slides/Splitter`;

        window.afterUploadSuccess = function (data, textStatus, xhr) {
            showInfo(window.Resources["SuccessfullyUploaded"]);
        }

        window.onWorkSuccess = () => window.scrollTo(0, 0);

        function AssignBtnToText(obj) {
            var t = $(obj).text();

            $("#btnSaveAs").html(t);
            $("#format").val(t);
        }
    </script>
}